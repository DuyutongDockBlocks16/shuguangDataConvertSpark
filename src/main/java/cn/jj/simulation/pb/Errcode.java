// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errcode.proto

package cn.jj.simulation.pb;

public final class Errcode {
  private Errcode() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code shuguang.MsgErrorType}
   */
  public enum MsgErrorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 帧里面的每个英雄都会有
     * </pre>
     *
     * <code>SUCCESS = 0;</code>
     */
    SUCCESS(0),
    /**
     * <pre>
     * 帧，过载保护，请求失败 
     * </pre>
     *
     * <code>ERROR_OVERLOAD = 1;</code>
     */
    ERROR_OVERLOAD(1),
    /**
     * <pre>
     * 帧，请求帧号小于当前帧号，请求失败
     * </pre>
     *
     * <code>ERROR_FRAME_INCORRECT = 2;</code>
     */
    ERROR_FRAME_INCORRECT(2),
    /**
     * <pre>
     * 帧，游戏已经存在，创建失败
     * </pre>
     *
     * <code>ERROR_GAME_STARTED = 3;</code>
     */
    ERROR_GAME_STARTED(3),
    /**
     * <pre>
     * 帧，游戏不存在，请求失败
     * </pre>
     *
     * <code>ERROR_GAME_NOT_EXIST = 4;</code>
     */
    ERROR_GAME_NOT_EXIST(4),
    /**
     * <pre>
     * 帧，请求等待处理超时，处理失败
     * </pre>
     *
     * <code>ERROR_TIMEOUT = 5;</code>
     */
    ERROR_TIMEOUT(5),
    /**
     * <pre>
     * 帧，请求包pb解析失败
     * </pre>
     *
     * <code>ERROR_PROTO_PARSE = 6;</code>
     */
    ERROR_PROTO_PARSE(6),
    /**
     * <pre>
     * 帧里面每个英雄独立，英雄处理，该英雄请求失败
     * </pre>
     *
     * <code>ERROR_AI_PROCESS = 7;</code>
     */
    ERROR_AI_PROCESS(7),
    /**
     * <pre>
     * 帧，请求时间间隔太短，请求失败
     * </pre>
     *
     * <code>ERROR_REQ_FREQUENT = 8;</code>
     */
    ERROR_REQ_FREQUENT(8),
    /**
     * <pre>
     * 帧里面每个英雄，不需要处理任何动作，当前不返回
     * </pre>
     *
     * <code>ERROR_DO_NOTHING = 9;</code>
     */
    ERROR_DO_NOTHING(9),
    /**
     * <pre>
     * 帧，没有需要托管的英雄,请求失败
     * </pre>
     *
     * <code>ERROR_NO_HERO = 10;</code>
     */
    ERROR_NO_HERO(10),
    /**
     * <pre>
     * 帧，创建游戏失败，请求失败
     * </pre>
     *
     * <code>ERROR_CREATE_GAME_FAIL = 11;</code>
     */
    ERROR_CREATE_GAME_FAIL(11),
    /**
     * <pre>
     * 帧，合并失败
     * </pre>
     *
     * <code>ERROR_COMBINE_FAIL = 12;</code>
     */
    ERROR_COMBINE_FAIL(12),
    /**
     * <pre>
     * 帧，下发的时间间隔太短
     * </pre>
     *
     * <code>ERROR_TIME_TOO_SHORT = 13;</code>
     */
    ERROR_TIME_TOO_SHORT(13),
    /**
     * <pre>
     * 帧里面的每个英雄，该英雄不支持
     * </pre>
     *
     * <code>ERROR_HERO_NOT_SUPPORT = 14;</code>
     */
    ERROR_HERO_NOT_SUPPORT(14),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 帧里面的每个英雄都会有
     * </pre>
     *
     * <code>SUCCESS = 0;</code>
     */
    public static final int SUCCESS_VALUE = 0;
    /**
     * <pre>
     * 帧，过载保护，请求失败 
     * </pre>
     *
     * <code>ERROR_OVERLOAD = 1;</code>
     */
    public static final int ERROR_OVERLOAD_VALUE = 1;
    /**
     * <pre>
     * 帧，请求帧号小于当前帧号，请求失败
     * </pre>
     *
     * <code>ERROR_FRAME_INCORRECT = 2;</code>
     */
    public static final int ERROR_FRAME_INCORRECT_VALUE = 2;
    /**
     * <pre>
     * 帧，游戏已经存在，创建失败
     * </pre>
     *
     * <code>ERROR_GAME_STARTED = 3;</code>
     */
    public static final int ERROR_GAME_STARTED_VALUE = 3;
    /**
     * <pre>
     * 帧，游戏不存在，请求失败
     * </pre>
     *
     * <code>ERROR_GAME_NOT_EXIST = 4;</code>
     */
    public static final int ERROR_GAME_NOT_EXIST_VALUE = 4;
    /**
     * <pre>
     * 帧，请求等待处理超时，处理失败
     * </pre>
     *
     * <code>ERROR_TIMEOUT = 5;</code>
     */
    public static final int ERROR_TIMEOUT_VALUE = 5;
    /**
     * <pre>
     * 帧，请求包pb解析失败
     * </pre>
     *
     * <code>ERROR_PROTO_PARSE = 6;</code>
     */
    public static final int ERROR_PROTO_PARSE_VALUE = 6;
    /**
     * <pre>
     * 帧里面每个英雄独立，英雄处理，该英雄请求失败
     * </pre>
     *
     * <code>ERROR_AI_PROCESS = 7;</code>
     */
    public static final int ERROR_AI_PROCESS_VALUE = 7;
    /**
     * <pre>
     * 帧，请求时间间隔太短，请求失败
     * </pre>
     *
     * <code>ERROR_REQ_FREQUENT = 8;</code>
     */
    public static final int ERROR_REQ_FREQUENT_VALUE = 8;
    /**
     * <pre>
     * 帧里面每个英雄，不需要处理任何动作，当前不返回
     * </pre>
     *
     * <code>ERROR_DO_NOTHING = 9;</code>
     */
    public static final int ERROR_DO_NOTHING_VALUE = 9;
    /**
     * <pre>
     * 帧，没有需要托管的英雄,请求失败
     * </pre>
     *
     * <code>ERROR_NO_HERO = 10;</code>
     */
    public static final int ERROR_NO_HERO_VALUE = 10;
    /**
     * <pre>
     * 帧，创建游戏失败，请求失败
     * </pre>
     *
     * <code>ERROR_CREATE_GAME_FAIL = 11;</code>
     */
    public static final int ERROR_CREATE_GAME_FAIL_VALUE = 11;
    /**
     * <pre>
     * 帧，合并失败
     * </pre>
     *
     * <code>ERROR_COMBINE_FAIL = 12;</code>
     */
    public static final int ERROR_COMBINE_FAIL_VALUE = 12;
    /**
     * <pre>
     * 帧，下发的时间间隔太短
     * </pre>
     *
     * <code>ERROR_TIME_TOO_SHORT = 13;</code>
     */
    public static final int ERROR_TIME_TOO_SHORT_VALUE = 13;
    /**
     * <pre>
     * 帧里面的每个英雄，该英雄不支持
     * </pre>
     *
     * <code>ERROR_HERO_NOT_SUPPORT = 14;</code>
     */
    public static final int ERROR_HERO_NOT_SUPPORT_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static MsgErrorType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MsgErrorType forNumber(int value) {
      switch (value) {
        case 0: return SUCCESS;
        case 1: return ERROR_OVERLOAD;
        case 2: return ERROR_FRAME_INCORRECT;
        case 3: return ERROR_GAME_STARTED;
        case 4: return ERROR_GAME_NOT_EXIST;
        case 5: return ERROR_TIMEOUT;
        case 6: return ERROR_PROTO_PARSE;
        case 7: return ERROR_AI_PROCESS;
        case 8: return ERROR_REQ_FREQUENT;
        case 9: return ERROR_DO_NOTHING;
        case 10: return ERROR_NO_HERO;
        case 11: return ERROR_CREATE_GAME_FAIL;
        case 12: return ERROR_COMBINE_FAIL;
        case 13: return ERROR_TIME_TOO_SHORT;
        case 14: return ERROR_HERO_NOT_SUPPORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgErrorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MsgErrorType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgErrorType>() {
            public MsgErrorType findValueByNumber(int number) {
              return MsgErrorType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Errcode.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgErrorType[] VALUES = values();

    public static MsgErrorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MsgErrorType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:shuguang.MsgErrorType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\rerrcode.proto\022\010shuguang*\347\002\n\014MsgErrorTy" +
      "pe\022\013\n\007SUCCESS\020\000\022\022\n\016ERROR_OVERLOAD\020\001\022\031\n\025E" +
      "RROR_FRAME_INCORRECT\020\002\022\026\n\022ERROR_GAME_STA" +
      "RTED\020\003\022\030\n\024ERROR_GAME_NOT_EXIST\020\004\022\021\n\rERRO" +
      "R_TIMEOUT\020\005\022\025\n\021ERROR_PROTO_PARSE\020\006\022\024\n\020ER" +
      "ROR_AI_PROCESS\020\007\022\026\n\022ERROR_REQ_FREQUENT\020\010" +
      "\022\024\n\020ERROR_DO_NOTHING\020\t\022\021\n\rERROR_NO_HERO\020" +
      "\n\022\032\n\026ERROR_CREATE_GAME_FAIL\020\013\022\026\n\022ERROR_C" +
      "OMBINE_FAIL\020\014\022\030\n\024ERROR_TIME_TOO_SHORT\020\r\022" +
      "\032\n\026ERROR_HERO_NOT_SUPPORT\020\016B\023\n\021cn.jj.shu" +
      "guang.pbb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
